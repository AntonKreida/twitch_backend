generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ENUM_TYPE_TOKEN {
  EMAIL
  PASSWORD
  TFA
  DEACTIVATED
}

model User {
  id                   String    @id @default(uuid())
  firstName            String
  lastName             String
  username             String    @unique
  email                String    @unique
  bio                  String?
  passwordHash         String
  isEmailVerification  Boolean   @default(false)
  isTwoFactorEnable    Boolean   @default(false)
  isDeactivatedAccount Boolean   @default(false)
  deactivatedAt        DateTime?
  twoFactorSecret      String?
  createAt             DateTime  @default(now())
  updateAt             DateTime  @updatedAt

  avatar UserAvatar?
  tokens Token[]
  social Social[]
  stream Stream?
}

model Token {
  id        String          @id @default(uuid())
  type      ENUM_TYPE_TOKEN
  token     String          @unique
  createAt  DateTime        @default(now())
  updateAt  DateTime        @updatedAt
  expiresIn DateTime
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserAvatar {
  id      String @id @default(uuid())
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId String @unique
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
}

model Image {
  id            String         @id @default(uuid())
  src           String
  UserAvatar    UserAvatar?
  StreamPreview StreamPreview?
}

model Social {
  id       String @id @default(uuid())
  title    String
  url      String
  position Int

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stream {
  id        String   @id @default(uuid())
  title     String
  ingressId String?  @unique
  serverUrl String?
  streamKey String?
  isLive    Boolean  @default(false)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  streamPreview StreamPreview?
}

model StreamPreview {
  id String @id @default(uuid())

  imageId String @unique
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  streamId String @unique
  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
}
